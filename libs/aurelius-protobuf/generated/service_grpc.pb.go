// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: service.proto

package aurelius_protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AureliusAgentManagerClient is the client API for AureliusAgentManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AureliusAgentManagerClient interface {
	JobChat(ctx context.Context, opts ...grpc.CallOption) (AureliusAgentManager_JobChatClient, error)
	RegisterAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*RegisterAgentResponse, error)
}

type aureliusAgentManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewAureliusAgentManagerClient(cc grpc.ClientConnInterface) AureliusAgentManagerClient {
	return &aureliusAgentManagerClient{cc}
}

func (c *aureliusAgentManagerClient) JobChat(ctx context.Context, opts ...grpc.CallOption) (AureliusAgentManager_JobChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &AureliusAgentManager_ServiceDesc.Streams[0], "/AureliusAgentManager/JobChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &aureliusAgentManagerJobChatClient{stream}
	return x, nil
}

type AureliusAgentManager_JobChatClient interface {
	Send(*JobChatRequest) error
	CloseAndRecv() (*JobChatResponse, error)
	grpc.ClientStream
}

type aureliusAgentManagerJobChatClient struct {
	grpc.ClientStream
}

func (x *aureliusAgentManagerJobChatClient) Send(m *JobChatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aureliusAgentManagerJobChatClient) CloseAndRecv() (*JobChatResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(JobChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aureliusAgentManagerClient) RegisterAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*RegisterAgentResponse, error) {
	out := new(RegisterAgentResponse)
	err := c.cc.Invoke(ctx, "/AureliusAgentManager/RegisterAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AureliusAgentManagerServer is the server API for AureliusAgentManager service.
// All implementations must embed UnimplementedAureliusAgentManagerServer
// for forward compatibility
type AureliusAgentManagerServer interface {
	JobChat(AureliusAgentManager_JobChatServer) error
	RegisterAgent(context.Context, *RegisterAgentRequest) (*RegisterAgentResponse, error)
	mustEmbedUnimplementedAureliusAgentManagerServer()
}

// UnimplementedAureliusAgentManagerServer must be embedded to have forward compatible implementations.
type UnimplementedAureliusAgentManagerServer struct {
}

func (UnimplementedAureliusAgentManagerServer) JobChat(AureliusAgentManager_JobChatServer) error {
	return status.Errorf(codes.Unimplemented, "method JobChat not implemented")
}
func (UnimplementedAureliusAgentManagerServer) RegisterAgent(context.Context, *RegisterAgentRequest) (*RegisterAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAgent not implemented")
}
func (UnimplementedAureliusAgentManagerServer) mustEmbedUnimplementedAureliusAgentManagerServer() {}

// UnsafeAureliusAgentManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AureliusAgentManagerServer will
// result in compilation errors.
type UnsafeAureliusAgentManagerServer interface {
	mustEmbedUnimplementedAureliusAgentManagerServer()
}

func RegisterAureliusAgentManagerServer(s grpc.ServiceRegistrar, srv AureliusAgentManagerServer) {
	s.RegisterService(&AureliusAgentManager_ServiceDesc, srv)
}

func _AureliusAgentManager_JobChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AureliusAgentManagerServer).JobChat(&aureliusAgentManagerJobChatServer{stream})
}

type AureliusAgentManager_JobChatServer interface {
	SendAndClose(*JobChatResponse) error
	Recv() (*JobChatRequest, error)
	grpc.ServerStream
}

type aureliusAgentManagerJobChatServer struct {
	grpc.ServerStream
}

func (x *aureliusAgentManagerJobChatServer) SendAndClose(m *JobChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aureliusAgentManagerJobChatServer) Recv() (*JobChatRequest, error) {
	m := new(JobChatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AureliusAgentManager_RegisterAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AureliusAgentManagerServer).RegisterAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AureliusAgentManager/RegisterAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AureliusAgentManagerServer).RegisterAgent(ctx, req.(*RegisterAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AureliusAgentManager_ServiceDesc is the grpc.ServiceDesc for AureliusAgentManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AureliusAgentManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AureliusAgentManager",
	HandlerType: (*AureliusAgentManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAgent",
			Handler:    _AureliusAgentManager_RegisterAgent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JobChat",
			Handler:       _AureliusAgentManager_JobChat_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
